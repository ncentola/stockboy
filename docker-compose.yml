version: '3'

services:

  service_base:
    build: .
    image: service_base

  queue:
    image: 'rabbitmq:3.8-management-alpine'
    ports:
      - '5672:5672'
      - '15672:15672'
    expose:
      - 15676
    volumes:
      - ./queue/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./queue/enabled_plugins:/etc/rabbitmq/enabled_plugins
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 30s
        timeout: 10s
        retries: 5
    networks:
      - network

  flyway:
    image: flyway/flyway
    depends_on:
      - db
    links:
      - db:db
    environment:
      - POSTGRES_USER=stockboy
      - POSTGRES_PASSWORD=stockboy
      - POSTGRES_DB=stockboy
    volumes:
      - ./flyway/conf:/flyway/conf
      - ./flyway/sql:/flyway/sql
    command: migrate
    networks:
      - network

  react:
    container_name: frontend
    build:
      context: ./react
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./react/ssl:/etc/nginx/certs
    depends_on:
      - api
    networks:
      - network

  db:
    image: postgres:10.4
    environment:
      - POSTGRES_USER=stockboy
      - POSTGRES_PASSWORD=stockboy
      - POSTGRES_DB=stockboy
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - network

  transaction_consumer:
    image: service_base
    depends_on:
      - db
      - queue
      - service_base
    restart: on-failure
    links:
      - db:db
    networks:
      - network
    volumes:
      - ./transaction_consumer:/service

  upc_lookup:
    image: service_base
    depends_on:
      - db
      - queue
      - service_base
    restart: on-failure
    links:
      - db:db
    networks:
      - network
    volumes:
      - ./upc_lookup:/service

  scanner:
    image: service_base
    depends_on:
      - db
      - queue
      - service_base
    restart: on-failure
    networks:
      - network
    volumes:
      - ./scanner:/service

  frontend:
    image: service_base
    depends_on:
      - db
      - api
      - service_base
    restart: on-failure
    links:
      - db:db
    ports:
      - 8050:8050
    networks:
      - network
    volumes:
      - ./frontend:/service

  scanner:
    image: service_base
    depends_on:
      - db
      - queue
      - service_base
    restart: on-failure
    networks:
      - network
    volumes:
      - ./scanner:/service

  api:
    image: service_base
    depends_on:
      - db
      - service_base
    environment:
      - POSTGRES_USER=stockboy
      - POSTGRES_PASSWORD=stockboy
      - POSTGRES_DB=stockboy
    restart: on-failure
    ports:
      - 5000:80
    expose:
      - 80
    networks:
      - network
    volumes:
      - ./api:/service

volumes:
     pgdata:

networks:
  network: {}
